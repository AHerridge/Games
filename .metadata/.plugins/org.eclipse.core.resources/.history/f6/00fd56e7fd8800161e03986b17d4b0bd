package jrAlex.core;

import java.awt.Point;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.spi.FileTypeDetector;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

public class World
{
	protected WorldObject[][]	objects;
	protected List<Point>		endpoints;

	public World(int width, int height)
	{
		this.objects = new WorldObject[height][width];
		this.endpoints = new ArrayList<>();
	}

	public World(WorldObject[][] objects, List<Point> endpoints)
	{
		this.objects = objects;
		this.endpoints = endpoints;
	}

	public void addObject(WorldObject wo, int col, int row)
	{
		objects[row][col] = wo;
	}

	public WorldObject[][] getObjects()
	{
		return objects;
	}

	public int getHeight()
	{
		return objects.length;
	}

	public int getWidth()
	{
		return objects[0].length;
	}

	public Point getPlayerCoords()
	{
		for (int row = 0; row < getHeight(); row++)
			for (int col = 0; col < getWidth(); col++)
				if (objects[row][col] != null && objects[row][col].type == ObjectType.PLAYER)
					return new Point(col, row);
		return null;
	}

	public void movePlayer()
	{
		Point playerCoords = getPlayerCoords();
		moveObject(playerCoords.x, playerCoords.y,
				playerCoords.x + objects[playerCoords.y][playerCoords.x].dir.colShift,
				playerCoords.y + objects[playerCoords.y][playerCoords.x].dir.rowShift);
	}

	public void changePlayerDir(Direction newDir)
	{
		getPlayer().changeDir(newDir);
	}

	public WorldObject getPlayer()
	{
		Point playerCoords = getPlayerCoords();
		return objects[playerCoords.y][playerCoords.x];
	}

	public boolean moveObject(int oldCol, int oldRow, int newCol, int newRow)
	{
		if (oldCol < 0 || oldCol >= getWidth() || oldRow < 0 || oldRow >= getHeight() || newCol < 0
				|| newCol >= getWidth() || newRow < 0 || newRow >= getHeight())
			return false;
		else if (objects[oldRow][oldCol] == null)
			return true;
		else if (objects[newRow][newCol] == null)
		{
			objects[newRow][newCol] = objects[oldRow][oldCol];
			objects[oldRow][oldCol] = null;
			return true;
		}
		else
		{
			objects[newRow][newCol].dir = objects[oldRow][oldCol].dir;
			if (objects[oldRow][oldCol].isMoveable() && objects[newRow][newCol].isMoveable()
					&& moveObject(newCol, newRow, newCol + objects[oldRow][oldCol].dir.colShift,
							newRow + objects[oldRow][oldCol].dir.rowShift))
			{
				objects[newRow][newCol] = objects[oldRow][oldCol];
				objects[oldRow][oldCol] = null;
				return true;
			}
			return false;
		}
	}

	public static World load(String fileName)
	{
		try
		{
			Scanner scanner = new Scanner(new File("./res/levels/" + fileName + ".lvl"));

			String[] props = scanner.nextLine().split(" ");
			int width = Integer.parseInt(props[0]);
			int height = Integer.parseInt(props[1]);

			WorldObject[][] objects = new WorldObject[height][width];
			for (int row = 0; row < height; row++)
			{
				String[] objectStrings = scanner.nextLine().split(", ");
				for (int col = 0; col < width; col++)
					if (Integer.parseInt(objectStrings[col]) - 1 != -1)
						objects[row][col] = new WorldObject(
								ObjectType.values()[Integer.parseInt(objectStrings[col]) - 1]);
			}

			String[] pointStrings = scanner.nextLine().split(", ");
			List<Point> points = new ArrayList<Point>(pointStrings.length);
			for (int i = 0; i < pointStrings.length; i++)
			{
				String[] pointProps = pointStrings[i].split(" ");
				points.set(i, new Point(Integer.parseInt(pointProps[0]), Integer.parseInt(pointProps[1])));
			}

			scanner.close();
			return new World(objects, points);
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
		}
		return null;
	}

	public void save(String fileName)
	{
		try
		{
			JFileChooser saveFile = new JFileChooser();
            saveFile.addChoosableFileFilter(new FileFilter()
			{
				@Override
				public String getDescription()
				{
					return ".lvl";
				}
				
				@Override
				public boolean accept(File f)
				{
					f.getAbsolutePath().endsWith(".lvl");
					return false;
				}
			});
            saveFile.showSaveDialog(null);
			BufferedWriter br = new BufferedWriter(new FileWriter(saveFile.getSelectedFile()));
			br.write(getWidth() + " " + getHeight());
			
			br.newLine();
			for (int row = 0; row < getHeight(); row++)
				for (int col = 0; col < getWidth(); col++)
					if(objects[row][col] == null)
						br.write(0 + ", ");
					else
						br.write(ObjectType.getIndexOf(objects[row][col].type) + ", ");
			
			br.newLine();
			for(Point point : endpoints)
				br.write(point.x + " " + point.y + ", ");
			
			br.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public boolean checkWin()
	{
		for (Point point : this.endpoints)
			if (objects[point.y][point.x] == null || !(objects[point.y][point.x].type == ObjectType.CRATE))
				return false;
		return true;
	}

	@Override
	public String toString()
	{
		String desc = "";
		for (int row = 0; row < getHeight(); row++)
		{
			desc += "\n";
			for (int col = 0; col < getWidth(); col++)
				desc += ((objects[row][col] == null) ? "null" : objects[row][col].type.name()) + ", ";
		}
		return desc;
	}
}
